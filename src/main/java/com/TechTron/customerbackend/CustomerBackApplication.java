package com.TechTron.customerbackend;

import io.swagger.v3.oas.annotations.OpenAPIDefinition;
import io.swagger.v3.oas.models.ExternalDocumentation;
import io.swagger.v3.oas.models.OpenAPI;
import io.swagger.v3.oas.models.info.Contact;
import io.swagger.v3.oas.models.info.Info;
import io.swagger.v3.oas.models.info.License;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration;
import org.springframework.context.annotation.Bean;


import java.util.Collections;

//@SpringBootApplication(exclude = {DataSourceAutoConfiguration.class})// to disable database
@SpringBootApplication
public class CustomerBackApplication {

	public static void main(String[] args) {
		SpringApplication.run(CustomerBackApplication.class, args);

	}

//  It marks the customOpenAPI() method as a bean definition.
//	Spring Boot will create an instance of this bean and manage its lifecycle.
//	By being a bean, the API documentation generated by customOpenAPI() becomes accessible throughout the application.
//  without @Bean we have to create instance manually and manage their lifecycle (creation, configuration, destruction).
//	@Bean annotation ensures that your custom OpenAPI configuration is applied to the Swagger documentation

//	Key Benefits of @Bean:
//	---------------------

//	Dependency Management: Spring handles object creation and configuration.
//	Loose Coupling: Promotes modularity and testability by avoiding direct object creation.
//	Flexibility: Beans can be configured and customized within the configuration class.
//	Testability: You can easily mock beans for testing purposes.


//	customOpenAPI() Method:
//							Creates a new OpenAPI object using the springdoc-openapi library.

//	When your application runs, Spring Boot automatically creates an instance of the customOpenAPI() bean.
//	Springdoc uses this bean to configure the OpenAPI documentation for your API endpoints.

//	Custom OpenAPI Configuration: The customOpenAPI() method, marked with @Bean, is responsible for creating an OpenAPI object with
//	customized configurations (title, description, etc.).

//	What @Bean Does:
//
//	Registers Object as Spring Bean: Annotating a method with @Bean instructs Spring Boot to:
//	Register the return value of the method as a bean in the Spring application context.
//	Manage the bean's lifecycle (creation, destruction).
//	Make the bean injectable into other components using dependency injection.

	@Bean
	public OpenAPI customOpenAPI() {
		return new OpenAPI()
				.info(new Info()
						.title("Craft-Of-Ceylon Customer API: Manage customers and their data") // Set the API title
						.description("Manage customers and their data efficiently.") // Add a description
						.version("1.0.0") // Specify the API version
						.contact(new Contact().email("support@craft-of-ceylon.com").name("Craft-Of-Ceylon Support Team"))
						.license(new License().name("MIT License").url("https://opensource.org/licenses/MIT")))
						.externalDocs(new ExternalDocumentation().description("API Documentation").url("https://docs.craft-of-ceylon.com/api"));
	}
}
